[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Building reproducible analytical pipelines with the R programming language",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "intro.html#prerequisites",
    "href": "intro.html#prerequisites",
    "title": "1  Introduction",
    "section": "1.1 Prerequisites",
    "text": "1.1 Prerequisites\nYou should be comfortable with the R programming language. This book will assume that you have been using R for some projects already, and want to improve not only your knowledge of the language itself, but also how to successfully manage complex projects."
  },
  {
    "objectID": "intro.html#what-is-reproducibility",
    "href": "intro.html#what-is-reproducibility",
    "title": "1  Introduction",
    "section": "1.2 What is reproducibility?",
    "text": "1.2 What is reproducibility?"
  },
  {
    "objectID": "intro.html#are-there-different-types-of-reproducibility",
    "href": "intro.html#are-there-different-types-of-reproducibility",
    "title": "1  Introduction",
    "section": "1.3 Are there different types of reproducibility?",
    "text": "1.3 Are there different types of reproducibility?\nReproducibility is on a continuum."
  },
  {
    "objectID": "fprog.html",
    "href": "fprog.html",
    "title": "2  Functional programming",
    "section": "",
    "text": "This chapter will teach you the fundamentals of functional programming. Functional programming might sound scary, but we will focus on only a handful of concepts that are quite accessible while providing many benefits. Using these functional programming concepts will make your code more reliable, easier to test, document, share, and ultimately rerun."
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "3  Version control",
    "section": "",
    "text": "What Miles said on the matter:\nThere are still a lot of people that find git intimidating and still potential for some things to go badly for a project if git is used in the wrong way. I once had a colleague who assured me they knew how to use git proceed to use a repo like their personal dropbox folder. Perhaps the details of git usage can be basically waved away, but some detail about good git workflow could be incorporated. For example: The branching model to use. IMHO trunk-based development works much better than gitflow for analysis teams. Version number discipline. Why you always bump the version number when making changes to your packages. Why keeping commits small and confined to just one target at a time if possible is useful when tracing problems with a pipeline."
  },
  {
    "objectID": "start_project.html#literate-programming",
    "href": "start_project.html#literate-programming",
    "title": "4  Getting started with your project",
    "section": "4.1 Literate programming",
    "text": "4.1 Literate programming\n\n4.1.1 Why bother?\nAllows you to explain what you’re doing as you’re coding. This file can later be inflated, if necessary, to make a package using {fusen}."
  },
  {
    "objectID": "start_project.html#quarto-basics",
    "href": "start_project.html#quarto-basics",
    "title": "4  Getting started with your project",
    "section": "4.2 Quarto basics",
    "text": "4.2 Quarto basics\nTeach some Quarto basics"
  },
  {
    "objectID": "start_project.html#parametrized-reports",
    "href": "start_project.html#parametrized-reports",
    "title": "4  Getting started with your project",
    "section": "4.3 Parametrized reports",
    "text": "4.3 Parametrized reports"
  },
  {
    "objectID": "start_project.html#your-project-is-done",
    "href": "start_project.html#your-project-is-done",
    "title": "4  Getting started with your project",
    "section": "4.4 Your project is done (?)",
    "text": "4.4 Your project is done (?)\nSo here the project is done, but actually it’s just an Qmd file that gets compiled, so we would need to explain why this is not enough, and motivate the readers to go the full way: developing packages, using targets, and so on"
  },
  {
    "objectID": "testing.html#assertive-testing-and-defenvise-programming",
    "href": "testing.html#assertive-testing-and-defenvise-programming",
    "title": "5  Testing your code",
    "section": "5.1 Assertive testing (and defenvise programming?)",
    "text": "5.1 Assertive testing (and defenvise programming?)\nThe analysis is still in Quarto, so how could the readers of this book test their code? Copying here what Miles wrote on the subject:\n‘Assertive programming’ is a topic that might be missing from the book. I think of it as a kind of dual of unit testing. Unit testing is for more generally applicable packaged code. But when you have functions in your analysis pipeline that operate on a very specific kind of input data, unit testing becomes kind of nonsensical because you’re left to dream up endless variations of your input dataset that may never occur. It’s a bit easier to flip the effort to validating the assumptions you have about your input and output data, which you can do in the pipeline functions themselves rather than separate unit testing ones. This is nice because it ensures the validation is performed in the pipeline run, and so is backed by the same reproducibility guarantees.\nI think at the end of the chapter we should hint at unit testing, but leave it as a subsection of the next chapter that deals with packaging code."
  },
  {
    "objectID": "packages.html#benefits-of-packages",
    "href": "packages.html#benefits-of-packages",
    "title": "6  Packaging your code",
    "section": "6.1 Benefits of packages",
    "text": "6.1 Benefits of packages"
  },
  {
    "objectID": "packages.html#intro-to-packge-dev",
    "href": "packages.html#intro-to-packge-dev",
    "title": "6  Packaging your code",
    "section": "6.2 Intro to packge dev",
    "text": "6.2 Intro to packge dev\nThis is where fusen comes into play I guess; so we start from the Qmd file that was written before, containing the functions an the analysis, and see how we can now create a package from it, and use that file as a vignette? Copying here what Sébastien said on the matter"
  },
  {
    "objectID": "packages.html#document-your-package",
    "href": "packages.html#document-your-package",
    "title": "6  Packaging your code",
    "section": "6.3 Document your package (?)",
    "text": "6.3 Document your package (?)\nI guess fusen makes this process easy and leverages roxygen?"
  },
  {
    "objectID": "packages.html#managing-package-dependencies",
    "href": "packages.html#managing-package-dependencies",
    "title": "6  Packaging your code",
    "section": "6.4 Managing package dependencies (?)",
    "text": "6.4 Managing package dependencies (?)\nDiscuss NAMESPACE and DESCRIPTION and all that. I think it’s important to also discuss here how to define dependencies from remotes, not just CRAN."
  },
  {
    "objectID": "packages.html#unit-testing",
    "href": "packages.html#unit-testing",
    "title": "6  Packaging your code",
    "section": "6.5 Unit testing",
    "text": "6.5 Unit testing\nThis is where I think we should discuss unit testing"
  },
  {
    "objectID": "packages.html#pkgdown",
    "href": "packages.html#pkgdown",
    "title": "6  Packaging your code",
    "section": "6.6 pkgdown",
    "text": "6.6 pkgdown"
  },
  {
    "objectID": "targets.html",
    "href": "targets.html",
    "title": "7  Build automation",
    "section": "",
    "text": "Why build automation: removes cognitive load, is a form of documentation in and of itself, as Miles said\nIt is possible to communicate a great deal of domain knowledge in code, such that it is illuminating beyond the mere mechanical number crunching. To do this well the author needs to make use of certain styles and structures that produce code that has layers of domain specific abstraction a reader can traverse up and down as they build their understanding of the project. Functional programming style, coupled with a dependency graph as per {targets} are useful tools in this regard."
  },
  {
    "objectID": "repro_intro.html",
    "href": "repro_intro.html",
    "title": "8  Introduction to reproducibility",
    "section": "",
    "text": "Since we said in the intro to the book that reproducibility is on a continuum, I think that this chapter should focus on the bare minimum, which would culminate with renv\nThen at the end, explain why renv is not enough (does nothing for R itself, nor the environment the code is running on)"
  },
  {
    "objectID": "repro_cont.html#first-steps-with-docker",
    "href": "repro_cont.html#first-steps-with-docker",
    "title": "9  Advanced topics in reproducibility",
    "section": "9.1 First steps with Docker",
    "text": "9.1 First steps with Docker\nTo write your own Dockerfile, you need some familiarity with the Linux cli, so here’s…"
  },
  {
    "objectID": "repro_cont.html#a-primer-on-the-linux-command-line",
    "href": "repro_cont.html#a-primer-on-the-linux-command-line",
    "title": "9  Advanced topics in reproducibility",
    "section": "9.2 A primer on the Linux command line",
    "text": "9.2 A primer on the Linux command line"
  },
  {
    "objectID": "repro_cont.html#dockrizing-your-project",
    "href": "repro_cont.html#dockrizing-your-project",
    "title": "9  Advanced topics in reproducibility",
    "section": "9.3 Dockrizing your project",
    "text": "9.3 Dockrizing your project"
  }
]